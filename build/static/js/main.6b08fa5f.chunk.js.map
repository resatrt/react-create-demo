{"version":3,"sources":["button/button.js","App.js","serviceWorker.js","index.js"],"names":["Button","state","active","detalX","detalY","myRef","React","createRef","event","clientX","clientY","this","current","getBoundingClientRect","x","y","setState","ref","className","onClick","bind","props","value","onAnimationEnd","style","left","top","Component","App","klsjadlksajdlksajdlksjlsjl","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAiDeA,G,wBA9CX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,QAAQ,EACRC,OAAQ,EACRC,OAAQ,GAEZ,EAAKC,MAAQC,IAAMC,YAPT,E,+DAUZC,GAAO,IAICC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QAJV,EAKUC,KAAKN,MAAMO,QAAQC,wBAA5BC,EALD,EAKCA,EACFX,EAASM,EAAUK,EAAI,EACvBV,EAASM,EAPR,EAKIK,EAEkB,EAE3BJ,KAAKK,SAAS,CACVd,QAAQ,EACRC,OAAQA,EACRC,OAAQA,M,0BAIZO,KAAKK,SAAS,CACVd,QAAO,M,+BAIX,OACI,4BAAQe,IAAKN,KAAKN,MAAOa,UAAU,SAASC,QAASR,KAAKG,EAAEM,KAAKT,OAC7D,0BAAMO,UAAU,WAAhB,IAA4BP,KAAKU,MAAMC,QAChB,IAAtBX,KAAKV,MAAMC,OACP,0BAAMgB,UAAU,SACjBK,eAAgBZ,KAAKI,EAAEK,KAAKT,MAC5Ba,MAAO,CAAEC,KAAMd,KAAKV,MAAME,OAAQuB,IAAKf,KAAKV,MAAMG,UAChD,Q,GAvCDuB,cCmBNC,E,0KAhBXC,GACAC,QAAQC,IAAI,kCACZD,QAAQC,IAAIF,K,+BAGZ,OACE,yBAAKX,UAAU,OACb,kBAAC,EAAD,CAAQI,MAAM,iBACd,kBAAC,EAAD,CAAQA,MAAM,iBACd,kBAAC,EAAD,CAAQA,MAAM,sB,GAVJK,aCQEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6b08fa5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './button.css'\nclass Button extends Component {\n    constructor() {\n        super()\n        this.state = {\n            active: false,\n            detalX: 0,\n            detalY: 0,\n        }\n        this.myRef = React.createRef();\n    }\n\n    x(event) {\n        // console.log(event.clientX)\n        // console.log(event.clientY)\n        // console.log(this.myRef.current.getBoundingClientRect())\n        let { clientX, clientY } = event\n        let { x, y } = this.myRef.current.getBoundingClientRect()\n        let detalX = clientX - x - 6\n        let detalY = clientY - y - 6\n        // console.log(detalX, detalY)\n        this.setState({\n            active: true,\n            detalX: detalX,\n            detalY: detalY,\n        })\n    }\n    y(){\n        this.setState({\n            active:false,\n        })\n    }\n    render() {\n        return (\n            <button ref={this.myRef} className='button' onClick={this.x.bind(this)}>\n                <span className='wrapper'> {this.props.value}</span>\n                {this.state.active === true ?\n                    (<span className='circle' \n                    onAnimationEnd={this.y.bind(this)}\n                    style={{ left: this.state.detalX, top: this.state.detalY }} />)\n                    : ''}\n\n            </button>\n\n        )\n    }\n}\n\nexport default Button","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './button/button.js';\n\nclass App extends Component {\n  z(klsjadlksajdlksajdlksjlsjl) {\n    console.log('外面的函数')\n    console.log(klsjadlksajdlksajdlksjlsjl);\n  }\n  render() {\n    return (\n      <div className='App'>\n        <Button value='按钮'  />\n        <Button value='按钮' />\n        <Button value='按钮' />\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}